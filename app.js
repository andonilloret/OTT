// Generated by CoffeeScript 1.9.3
(function() {
  var CEL, api, app, authRoutes, bodyParser, express, passport, passportPolicies, server, session;

  express = require('express');

  session = require('express-session');

  api = require('./server/api');

  bodyParser = require('body-parser');

  passport = require('passport');

  CEL = require('connect-ensure-login');

  passportPolicies = require('./server/passportPolicies');

  authRoutes = require('./routes/authRoutes');

  app = express();

  app.use(bodyParser.json());

  app.use('/public', express["static"](__dirname + '/public'));

  app.use(session({
    secret: 'keyboard cat',
    resave: false,
    saveUninitialized: true
  }));

  app.use(passport.initialize());

  app.use(passport.session());

  app.set('views', __dirname + '/public');

  app.set('view engine', 'ejs');

  app.use("/auth", authRoutes);

  app.get('/', function(req, res) {
    if (req.session.user) {
      return res.sendFile(__dirname + '/public/index.html');
    } else {
      return api.getSchedule(function(error, response) {
        var params;
        if (!error) {
          params = [];
          params.schedule = JSON.parse(response.body);
          return res.render('login', params);
        } else {
          return res.status(500).send('Ha habido un error cargando la página, por favor cargue de nuevo');
        }
      });
    }
  });

  app.get('/live', function(req, res) {
    var params;
    params = {
      user: req.session.user,
      page: 'live'
    };
    return api.getSchedule(function(error, response) {
      if (!error) {
        params.schedule = JSON.parse(response.body);
        return res.render('index', params);
      } else {
        return res.status(500).send('Ha habido un error cargando la página, por favor cargue de nuevo');
      }
    });
  });

  app.get('/media', CEL.ensureLoggedIn('/'), function(req, res) {
    var params;
    params = {
      user: req.session.user,
      page: 'media'
    };
    return api.getMedia(function(error, response) {
      if (!error) {
        params.categories = response;
        return res.render('index', params);
      } else {
        return res.status(500).send('Ha habido un error cargando la página, por favor cargue de nuevo');
      }
    });
  });

  app.get('/account', CEL.ensureLoggedIn('/'), function(req, res) {
    var params;
    console.log(req.session.passport.user);
    params = {
      user: req.session.passport.user,
      page: 'account'
    };
    return res.render('index', params);
  });

  app.get('/logout', function(req, res) {
    return req.session.destroy(function() {
      return res.redirect('/');
    });
  });

  app.post('/login', function(req, res) {
    return authenticate(req.body.email, req.body.password, function(err, user) {
      if (user) {
        return req.session.regenerate(function() {
          req.session.user = user;
          req.session.success = 'Authenticated as ' + user.email;
          return res.status('200').send(JSON.stringify(user));
        });
      } else {
        req.session.error = 'Authentication failed';
        return res.redirect(401, '/');
      }
    });
  });

  app.get('/signup', function(req, res) {
    return res.render('signup/signup');
  });

  app.post('/customer', function(req, res) {
    return api.signupCustomer(req.body, function(error, response) {
      if (!error) {
        return res.status(response.statusCode).send(response.body);
      } else {
        return res.status(500).send('No ha sido posible crear el usuario. Intentelo de nuevo por favor');
      }
    });
  });

  app.put('/customer', CEL.ensureLoggedIn('/'), function(req, res) {
    var updateUser;
    updateUser = req.body;
    updateUser.id = req.session.passport.user.id;
    return api.updateCustomer(updateUser, function(error, response) {
      var updated;
      if (!error) {
        if (response.statusCode === 200) {
          updated = JSON.parse(response.body).data;
          req.session.user = {
            first_name: updated.first_name,
            last_name: updated.last_name,
            email: updated.email,
            metadata: {
              birth_date: updated.metadata.birth_date
            }
          };
        }
        return res.status(response.statusCode).send('OK: USER UPDATED');
      } else {
        return res.status(500).send('No ha sido posible crear el usuario. Intentelo de nuevo por favor');
      }
    });
  });

  server = app.listen(3000, function() {
    var host, port;
    host = server.address().address;
    port = server.address().port;
    return console.log('Example app listening at http://%s:%s', host, port);
  });

}).call(this);

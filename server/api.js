// Generated by CoffeeScript 1.9.3
(function() {
  var APIUrl, HashMap, readWrite, request, write;

  request = require('request');

  HashMap = require('hashmap');

  write = 'd014c5992ee729f4a54a10ae3c73e754';

  readWrite = 'de7255df3d8dc5aeac406b0a74d4a113';

  APIUrl = 'https://streammanager.co/api/';

  exports.getCustomer = function(urlParams, callback) {
    return request.get({
      url: APIUrl + "customer?" + urlParams,
      headers: {
        'X-API-Token': readWrite
      }
    }, function(err, httpResponse, body) {
      if (!err) {
        return new callback(null, httpResponse);
      }
      return new callback(err);
    });
  };

  exports.signupCustomer = function(newCustomer, callback) {
    return request.post({
      url: APIUrl + "customer",
      form: newCustomer,
      headers: {
        'X-API-Token': readWrite
      }
    }, function(err, httpResponse, body) {
      if (!err) {
        return new callback(null, httpResponse);
      }
      return new callback(err);
    });
  };

  exports.updateCustomer = function(updateCustomer, callback) {
    return request.post({
      url: APIUrl + "customer/" + updateCustomer.id,
      form: updateCustomer,
      headers: {
        'X-API-Token': readWrite
      }
    }, function(err, httpResponse, body) {
      if (!err) {
        return new callback(null, httpResponse);
      }
      return new callback(err);
    });
  };

  exports.getSchedule = function(callback) {
    var liveStreamId;
    liveStreamId = '55eed15207dffb2915ba1159';
    return request.get({
      url: APIUrl + "live-stream/" + liveStreamId + "/schedule",
      headers: {
        'X-API-Token': write
      }
    }, function(err, httpResponse, body) {
      if (!err) {
        return new callback(null, httpResponse);
      }
      return new callback(err);
    });
  };

  exports.getMedia = function(callback) {
    return request.get({
      url: APIUrl + "media",
      headers: {
        'X-API-Token': readWrite
      }
    }, function(err, httpResponse, body) {
      var customResponse, map, res;
      if (!err) {
        map = new HashMap;
        customResponse = {};
        customResponse.categories = [];
        res = JSON.parse(body).data;
        res.forEach(function(video) {
          return video.categories.forEach(function(category) {
            if (!map.get(category.name)) {
              map.set(category.name, []);
            }
            return map.get(category.name).push(video);
          });
        });
        map.forEach(function(value, key) {
          var newCat;
          newCat = {
            name: key,
            videos: value
          };
          return customResponse.categories.push(newCat);
        });
        return new callback(null, customResponse);
      }
      return new callback(err);
    });
  };

}).call(this);
